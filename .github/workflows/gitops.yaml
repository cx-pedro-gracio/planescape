# # Example GitOps workflow (in .github/workflows/gitops.yaml)
# name: GitOps - Planescape Helm Operator

# on:
#   push:
#     branches: [ main, develop ]
#     paths:
#       - 'helm-operator/**'
#       - 'charts/**'
#       - 'examples/**'
#       - '.github/workflows/gitops.yaml'
#   pull_request:
#     branches: [ main ]
#     paths:
#       - 'helm-operator/**'
#       - 'charts/**'
#       - 'examples/**'

# env:
#   REGISTRY: ghcr.io
#   IMAGE_NAME: planescape/helm-operator

# jobs:
#   validate:
#     name: Validate Helm Charts and CRDs
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4
#         with:
#           fetch-depth: 0

#       - name: Set up Helm
#         uses: azure/setup-helm@v3
#         with:
#           version: v3.12.0

#       - name: Set up kubectl
#         uses: azure/setup-kubectl@v3
#         with:
#           version: v1.28.0

#       - name: Validate Helm Charts
#         run: |
#           # Validate main chart
#           helm lint charts/
#           helm template test charts/ --values charts/envs/local/values.yaml > /dev/null
          
#           # Validate job chart
#           helm lint charts/planescape-job/
#           helm template test-job charts/planescape-job/ > /dev/null

#       - name: Validate CRDs
#         run: |
#           # Check CRD syntax
#           kubectl --dry-run=client apply -f helm-operator/config/crd/bases/

#       - name: Validate Examples
#         run: |
#           # Validate example resources against CRDs
#           kubectl --dry-run=client apply -f helm-operator/config/crd/bases/
#           kubectl --dry-run=client apply -f examples/stacks/demo-stack-helm.yaml
#           kubectl --dry-run=client apply -f examples/jobs/demo-job-helm.yaml

#   security-scan:
#     name: Security Scan
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       - name: Run Trivy vulnerability scanner
#         uses: aquasecurity/trivy-action@master
#         with:
#           scan-type: 'fs'
#           scan-ref: '.'
#           format: 'sarif'
#           output: 'trivy-results.sarif'

#       - name: Upload Trivy scan results to GitHub Security tab
#         uses: github/codeql-action/upload-sarif@v2
#         if: always()
#         with:
#           sarif_file: 'trivy-results.sarif'

#   build-operator:
#     name: Build Operator Image
#     runs-on: ubuntu-latest
#     needs: [validate, security-scan]
#     if: github.event_name == 'push'
#     outputs:
#       image: ${{ steps.image.outputs.image }}
#       digest: ${{ steps.build.outputs.digest }}
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Log in to Container Registry
#         uses: docker/login-action@v3
#         with:
#           registry: ${{ env.REGISTRY }}
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}

#       - name: Extract metadata
#         id: meta
#         uses: docker/metadata-action@v5
#         with:
#           images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
#           tags: |
#             type=ref,event=branch
#             type=ref,event=pr
#             type=sha,prefix={{branch}}-
#             type=raw,value=latest,enable={{is_default_branch}}

#       - name: Build and push
#         id: build
#         uses: docker/build-push-action@v5
#         with:
#           context: helm-operator
#           platforms: linux/amd64,linux/arm64
#           push: true
#           tags: ${{ steps.meta.outputs.tags }}
#           labels: ${{ steps.meta.outputs.labels }}
#           cache-from: type=gha
#           cache-to: type=gha,mode=max

#       - name: Output image
#         id: image
#         run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT

#   deploy-dev:
#     name: Deploy to Development
#     runs-on: ubuntu-latest
#     needs: [build-operator]
#     if: github.ref == 'refs/heads/develop'
#     environment: development
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       - name: Set up kubectl
#         uses: azure/setup-kubectl@v3
#         with:
#           version: v1.28.0

#       - name: Configure kubectl
#         run: |
#           echo "${{ secrets.KUBECONFIG_DEV }}" | base64 -d > kubeconfig
#           export KUBECONFIG=kubeconfig

#       - name: Deploy CRDs
#         run: |
#           kubectl apply -f helm-operator/config/crd/bases/

#       - name: Deploy Operator
#         run: |
#           # Update image in deployment
#           sed -i 's|quay.io/operator-framework/helm-operator:v1.32.0|${{ needs.build-operator.outputs.image }}|g' helm-operator/config/manager/manager.yaml
#           kubectl apply -f helm-operator/config/rbac/role.yaml
#           kubectl apply -f helm-operator/config/manager/manager.yaml

#       - name: Deploy Example Stack
#         run: |
#           kubectl apply -f examples/stacks/demo-stack-helm.yaml

#       - name: Verify Deployment
#         run: |
#           kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=planescape-helm-operator -n planescape-system --timeout=300s
#           kubectl get planescapestacks -n planescape-system

#   deploy-prod:
#     name: Deploy to Production
#     runs-on: ubuntu-latest
#     needs: [build-operator]
#     if: github.ref == 'refs/heads/main'
#     environment: production
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       - name: Set up kubectl
#         uses: azure/setup-kubectl@v3
#         with:
#           version: v1.28.0

#       - name: Configure kubectl
#         run: |
#           echo "${{ secrets.KUBECONFIG_PROD }}" | base64 -d > kubeconfig
#           export KUBECONFIG=kubeconfig

#       - name: Deploy CRDs
#         run: |
#           kubectl apply -f helm-operator/config/crd/bases/

#       - name: Deploy Operator
#         run: |
#           # Update image in deployment
#           sed -i 's|quay.io/operator-framework/helm-operator:v1.32.0|${{ needs.build-operator.outputs.image }}|g' helm-operator/config/manager/manager.yaml
#           kubectl apply -f helm-operator/config/rbac/role.yaml
#           kubectl apply -f helm-operator/config/manager/manager.yaml

#       - name: Verify Deployment
#         run: |
#           kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=planescape-helm-operator -n planescape-system --timeout=300s