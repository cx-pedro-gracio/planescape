# Vault: Job to configure the database secrets engine and Jenkins role using the Postgres admin password from ESO-synced secret
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "planescape.fullname" . }}-vault-init
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "planescape.labels" . | nindent 4 }}
    component: vault-setup
spec:
  template:
    metadata:
      labels:
        {{- include "planescape.labels" . | nindent 8 }}
        component: vault-setup
    spec:
      restartPolicy: OnFailure
      serviceAccountName: vault-init
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
        - name: vault-init
          image: hashicorp/vault:1.15.2
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            capabilities:
              drop:
                - ALL
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: 500m
              memory: 512Mi
          env:
            - name: VAULT_ADDR
              value: "http://{{ include "planescape.fullname" . }}-vault.{{ .Release.Namespace }}.svc.cluster.local:8200"
            - name: VAULT_TOKEN
              value: {{ .Values.planescape.vault.token | quote }}
          command:
            - /bin/sh
            - -c
            - |
              echo "Starting Vault initialization..."
              
              # Wait for Vault to be ready
              echo "Waiting for Vault to be ready..."
              for i in $(seq 1 60); do
                if vault status >/dev/null 2>&1; then
                  echo "Vault is ready!"
                  break
                fi
                echo "Waiting for Vault... ($i/60)"
                sleep 3
              done
              
              # Verify authentication
              echo "Verifying Vault authentication..."
              vault auth -method=token token=$VAULT_TOKEN >/dev/null 2>&1
              
              # Generate Jenkins admin credentials in Vault if they don't exist
              echo "Setting up Jenkins admin credentials..."
              if ! vault kv get secret/planescape/jenkins >/dev/null 2>&1; then
                JENKINS_USER=admin
                JENKINS_PASS=$(head -c 32 /dev/urandom | base64 | tr -d '=+/' | cut -c1-32)
                vault kv put secret/planescape/jenkins username="$JENKINS_USER" password="$JENKINS_PASS"
                echo "Jenkins admin credentials created"
              else
                echo "Jenkins admin credentials already exist"
              fi

              # Generate Postgres admin password from Secret
              echo "Setting up PostgreSQL admin credentials..."
              if ! vault kv get secret/planescape/postgres >/dev/null 2>&1; then
                PW=$(head -c 32 /dev/urandom | base64 | tr -d '=+/' | cut -c1-32)
                vault kv put secret/planescape/postgres username="planescape" password="$PW"
                echo "PostgreSQL admin credentials created"
              else
                # Optionally: patch the secret if username is missing
                if ! vault kv get -field=username secret/planescape/postgres >/dev/null 2>&1; then
                  vault kv patch secret/planescape/postgres username="planescape"
                  echo "Patched missing username in existing secret"
                else
                  echo "PostgreSQL admin credentials already exist"
                fi
              fi

              # Enable the database secrets engine
              echo "Enabling database secrets engine..."
              vault secrets enable -path=database database 2>/dev/null || echo "Database engine already enabled"

              echo "Vault initialization completed successfully!"
      # Add RBAC for the job to read secrets
      automountServiceAccountToken: true
