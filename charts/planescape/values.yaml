# --- PostgreSQL configuration (Bitnami chart) ---
postgresql:
  enabled: true
  auth:
    database: planescape
    username: planescape
    # Password is managed via ESO and Vault
    existingSecret: planescape-postgres-admin
    secretKeys:
      adminPasswordKey: password
  primary:
    persistence:
      enabled: true
      size: 8Gi
    extraInitContainers: |
      - name: wait-for-postgres-secret
        image: bitnami/kubectl:1.28.2
        command:
          - /bin/sh
          - -c
          - |
            for i in $(seq 1 60); do
              if kubectl get secret planescape-postgres-admin -n $(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace) >/dev/null 2>&1; then
                echo "Secret planescape-postgres-admin found!"
                exit 0
              fi
              echo "Waiting for secret planescape-postgres-admin... ($i/60)"
              sleep 5
            done
            echo "ERROR: Secret planescape-postgres-admin not found after waiting."
            exit 1
        resources:
          requests:
            cpu: 10m
            memory: 16Mi
          limits:
            cpu: 50m
            memory: 32Mi
  resources:
    requests:
      cpu: 250m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 512Mi

# --- Jenkins configuration (official chart) ---
jenkins:
  enabled: true
  controller:
    serviceType: ClusterIP
    persistence:
      enabled: true
      size: 8Gi
    admin:
      # Use admin credentials from ESO-managed secret
      existingSecret: planescape-jenkins-admin
      userKey: jenkins-admin-user
      passwordKey: jenkins-admin-password
    resources:
      requests:
        cpu: 250m
        memory: 512Mi
      limits:
        cpu: 1000m
        memory: 1Gi
    installPlugins:
      - workflow-job
      - plain-credentials
      - build-user-vars-plugin
      - hashicorp-vault-plugin
      - job-dsl
    JCasC:
      configScripts:
        vault-config: |
          jenkins:
            systemMessage: "Planescape Jenkins - PostgreSQL, Vault, and Job DSL Integration Ready"
            unclassified:
              hashicorpVault:
                vaultUrl: "http://planescape-vault:8200"
                vaultCredentialId: "" # Use VAULT_TOKEN from environment
                engineVersion: 2
                failIfNotFound: true
                skipSslVerification: true
    initScripts:
      02-create-seed-job.groovy: |-
        import jenkins.model.*
        import javaposse.jobdsl.plugin.*
        import hudson.model.*

        def jobName = "SeedJob"
        def jenkins = Jenkins.instance
        
        // Delete existing SeedJob if it exists to force recreation with updated DSL
        def existingJob = jenkins.getItem(jobName)
        if (existingJob != null) {
          println "Deleting existing SeedJob to recreate with updated DSL script..."
          existingJob.delete()
          println "Existing SeedJob deleted"
        }
        
        println "Creating SeedJob..."
        
        def job = jenkins.createProject(FreeStyleProject, jobName)
        job.setDescription("Seed job to create other jobs using Job DSL")
        
        // Trigger the seed job to create other jobs
        job.scheduleBuild(0, new hudson.model.Cause.UserIdCause())
        println "SeedJob triggered for execution"
    agent:
      enabled: true
      resources:
        requests:
          cpu: 100m
          memory: 128Mi
          limits:
            cpu: 500m
            memory: 256Mi

# --- Vault configuration (official chart) ---
vault:
  # Disable agent injector - we don't need sidecar injection
  injector:
    enabled: false
  server:
    ha:
      enabled: false
    resources:
      requests:
        cpu: 250m
        memory: 256Mi
      limits:
        cpu: 500m
        memory: 512Mi
    dataStorage:
      size: 10Gi
    # Vault starts unsealed in dev mode for this demo
    # In production, use proper seal/unseal procedures
    dev:
      enabled: true
      devRootToken: "root"  # WARNING: Development only! Change for production

# --- Planescape Configuration ---
planescape:
  # Vault authentication configuration
  vault:
    # WARNING: Only for development! Use Kubernetes auth in production
    token: "root"
    
  # Database configuration
  database:
    name: "planescape"
    user: "planescape"
    
  # Security settings
  security:
    # Set to true to enable enhanced security contexts
    enforceSecurityContexts: true
    # Set to true to enforce read-only root filesystem where possible
    readOnlyRootFilesystem: true

# --- End of values.yaml --- 